
# coding: utf-8

# In[1]:


get_ipython().run_cell_magic('writefile', 'yourHomework.py`', '# Dependencies and Setup\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport requests\nimport time\nimport json\n\n# Import API key\nfrom api_keys import api_key\n\n# Incorporated citipy to determine city based on latitude and longitude\nfrom citipy import citipy\n\n# Output File (CSV)\noutput_data_file = "output_data/cities.csv"\n\n\n# Range of latitudes and longitudes\nlat_range = (-90, 90)\nlng_range = (-180, 180)\n\n## Generate Cities List\n\n# List for holding lat_lngs and cities\nlat_lngs = []\ncities = []\n\n# Create a set of random lat and lng combinations\nlats = np.random.uniform(low=-90.000, high=90.000, size=1500)\nlngs = np.random.uniform(low=-180.000, high=180.000, size=1500)\nlat_lngs = zip(lats, lngs)\n\n# Identify nearest city for each lat, lng combination\nfor lat_lng in lat_lngs:\n    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name\n\n    \n    # If the city is unique, then add it to a our cities list\n    if city not in cities:\n        cities.append(city)\n\n# Print the city count to confirm sufficient count\nlen(cities)\n\n\n## Perform API Calls\n\n# Starting URL for Weather Map API Call\nurl = "http://api.openweathermap.org/data/2.5/weather?units=Imperial&APPID=" + api_key \n\n\nCurl = url +"&q=" + city\nResponse = requests.get(Curl).json()\n\n\ndata=[]\nCurl=url +"&q=" + city\n#Loop through cities\nfor city in (cities):\n    Curl=url +"&q=" +city\n    Response = requests.get(Curl).json()\n    lng=response["coord"]["lat"]\n    lat=response["coord"]["lon"]\n\n\n\n\n# hold data for the API \ncity_data = []\n\n#looping through cities to create API call for each city\nfor city in cities:\n   # define city from API\n   city_url=url + "&q=" + city\n   #request data from API\n   try:\n       \n       response= requests.get(city_url).json()\n       \n       city_lat = response["coord"]["lat"]\n       city_lng = response["coord"]["lon"]\n       city_max_temp = response["main"]["temp_max"]\n       city_humidity = response["main"]["humidity"]\n       city_wind = response["wind"]["speed"]\n       city_clouds =response["clouds"]["all"]\n       city_country =response["sys"]["country"]\n       city_date =response["dt"]\n       #append information to city_data\n       city_data.append({\n           "Date":city_date,\n           "Country":city_country,\n           "City":city,\n           "Lat":city_lat,\n           "Lng":city_lat,\n           "Max Temp":city_max_temp,\n           "Humidity":city_humidity,\n           "Wind":city_wind,\n           "Clouds":city_clouds})\n\n   except ValueError:\n       print("City not found.Skipping city")\n\n#Temperature (F) vs. Latitude\nplt.scatter(Temp, Lat,  marker="o", facecolors="gold", edgecolors="skyblue") \n\n# Incorporate the other graph properties\nplt.title("Temperature (F) vs. Latitude")\nplt.xlabel("Temp")\nplt.ylabel("Latitude")\n\n\n\n#Humidity (%) vs. Latitude\nplt.scatter(Hum, Lat,  marker="o", facecolors="gold", edgecolors="skyblue") \n\n# Incorporate the other graph properties\nplt.title("Humidity (%) vs. Latitude")\nplt.xlabel("Humidity")\nplt.ylabel("Latitude")\n\n\n\n#Cloudiness (%) vs. Latitude\nplt.scatter(Cloud, Lat,  marker="o", facecolors="gold", edgecolors="skyblue") \n\n# Incorporate the other graph properties\nplt.title("Cloudiness (%) vs. Latitude")\nplt.xlabel("Cloudiness")\nplt.ylabel("Latitude")\n\n\n\n\n#Wind Speed (mph) vs. Latitude\nplt.scatter(Wind, Lat,  marker="o", facecolors="gold", edgecolors="skyblue") \n\n# Incorporate the other graph properties\nplt.title("Wind Speed (%) vs. Latitude")\nplt.xlabel("Wind Speed")\nplt.ylabel("Latitude")\n\n\n\n\n')

